import React, { useState, useEffect } from 'react';
import { 
  Container, 
  Row, 
  Col, 
  Form, 
  Button, 
  Card, 
  ListGroup,
  Modal
} from 'react-bootstrap';
import { auth, db } from "../firebaseConfig";
import { 
  collection, 
  query, 
  where, 
  getDocs, 
  addDoc, 
  deleteDoc, 
  doc,
  updateDoc
} from "firebase/firestore";

const PetJournalPage = () => {
  const [selectedPet, setSelectedPet] = useState(null);
  const [journalEntry, setJournalEntry] = useState('');
  const [entries, setEntries] = useState([]);
  const [userId, setUserId] = useState(null);
  const [pets, setPets] = useState([]);
  const [loading, setLoading] = useState(false);
  const [editingEntry, setEditingEntry] = useState(null);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [entryToDelete, setEntryToDelete] = useState(null);

  useEffect(() => {
    const unsubscribe = auth.onAuthStateChanged((user) => {
      if (user) {
        setUserId(user.uid);
        fetchPets(user.uid);
        fetchJournalEntries(user.uid);
      } else {
        setUserId(null);
        setPets([]);
        setEntries([]);
        setLoading(false);
      }
    });

    return () => unsubscribe();
  }, []);

  const fetchPets = async (userId) => {
    setLoading(true);
    try {
      const q = query(collection(db, "pets"), where("userId", "==", userId));
      const querySnapshot = await getDocs(q);
      const petsData = querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
      setPets(petsData);
    } catch (error) {
      console.error("Error fetching pets:", error);
    } finally {
      setLoading(false);
    }
  };

  const fetchJournalEntries = async (userId) => {
    setLoading(true);
    try {
      const q = query(collection(db, "journal_entries"), where("userId", "==", userId));
      const querySnapshot = await getDocs(q);
      const entriesData = querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
      setEntries(entriesData);
    } catch (error) {
      console.error("Error fetching journal entries:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleAddEntry = async () => {
    if (selectedPet && journalEntry.trim() && userId) {
      try {
        const newEntry = {
          userId,
          petId: selectedPet.id,
          entry: journalEntry,
          date: new Date().toLocaleDateString(),
          time: new Date().toLocaleTimeString()
        };

        const docRef = await addDoc(collection(db, "journal_entries"), newEntry);
        newEntry.id = docRef.id;
        setEntries([...entries, newEntry]);
        setJournalEntry('');
      } catch (error) {
        console.error("Error adding journal entry:", error);
      }
    }
  };

  const handleEditEntry = async () => {
    if (editingEntry && journalEntry.trim()) {
      try {
        const entryRef = doc(db, "journal_entries", editingEntry.id);
        await updateDoc(entryRef, { 
          entry: journalEntry,
          date: new Date().toLocaleDateString(),
          time: new Date().toLocaleTimeString()
        });

        const updatedEntries = entries.map(entry => 
          entry.id === editingEntry.id 
            ? { ...entry, entry: journalEntry, date: new Date().toLocaleDateString(), time: new Date().toLocaleTimeString() }
            : entry
        );
        setEntries(updatedEntries);
        setJournalEntry('');
        setEditingEntry(null);
      } catch (error) {
        console.error("Error editing journal entry:", error);
      }
    }
  };

  const handleDeleteEntry = async () => {
    if (entryToDelete) {
      try {
        await deleteDoc(doc(db, "journal_entries", entryToDelete.id));
        const updatedEntries = entries.filter(entry => entry.id !== entryToDelete.id);
        setEntries(updatedEntries);
        setShowDeleteModal(false);
        setEntryToDelete(null);
      } catch (error) {
        console.error("Error deleting journal entry:", error);
      }
    }
  };

  const startEditEntry = (entry) => {
    setEditingEntry(entry);
    setJournalEntry(entry.entry);
  };

  const confirmDeleteEntry = (entry) => {
    setEntryToDelete(entry);
    setShowDeleteModal(true);
  };

  return (
    <Container className="mt-5">
      <Card>
        <Card.Header>
          <h2>Pet Journal</h2>
        </Card.Header>
        <Card.Body>
          <Row>
            <Col md={4}>
              <h4>Select Pet</h4>
              <ListGroup>
                {pets.map(pet => (
                  <ListGroup.Item 
                    key={pet.id}
                    active={selectedPet?.id === pet.id}
                    onClick={() => setSelectedPet(pet)}
                  >
                    {pet.name}
                  </ListGroup.Item>
                ))}
              </ListGroup>
            </Col>
            <Col md={8}>
              <Form>
                <Form.Group>
                  <Form.Label>
                    Journal Entry for {selectedPet ? selectedPet.name : 'Select a Pet'}
                  </Form.Label>
                  <Form.Control
                    as="textarea"
                    rows={4}
                    value={journalEntry}
                    onChange={(e) => setJournalEntry(e.target.value)}
                    disabled={!selectedPet}
                    placeholder={selectedPet 
                      ? `Write about ${selectedPet.name} today...` 
                      : 'Please select a pet first'}
                  />
                </Form.Group>
                <Button 
                  variant="primary" 
                  onClick={editingEntry ? handleEditEntry : handleAddEntry}
                  disabled={!selectedPet || !journalEntry.trim()}
                >
                  {editingEntry ? 'Update Entry' : 'Save Entry'}
                </Button>
                {editingEntry && (
                  <Button 
                    variant="secondary" 
                    onClick={() => {
                      setEditingEntry(null);
                      setJournalEntry('');
                    }}
                    className="ml-2"
                  >
                    Cancel
                  </Button>
                )}
              </Form>

              <div className="mt-4">
                <h4>Journal Entries</h4>
                {entries
                  .filter(entry => entry.petId === selectedPet?.id)
                  .map(entry => (
                    <Card key={entry.id} className="mb-2">
                      <Card.Body>
                        <Card.Text>{entry.entry}</Card.Text>
                        <Card.Footer>
                          <div className="d-flex justify-content-between">
                            <span>{entry.date} {entry.time}</span>
                            <div>
                              <Button 
                                variant="outline-primary" 
                                size="sm" 
                                className="mr-2"
                                onClick={() => startEditEntry(entry)}
                              >
                                Edit
                              </Button>
                              <Button 
                                variant="outline-danger" 
                                size="sm"
                                onClick={() => confirmDeleteEntry(entry)}
                              >
                                Delete
                              </Button>
                            </div>
                          </div>
                        </Card.Footer>
                      </Card.Body>
                    </Card>
                  ))
                }
              </div>
            </Col>
          </Row>
        </Card.Body>
      </Card>

      <Modal show={showDeleteModal} onHide={() => setShowDeleteModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Confirm Delete</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          Are you sure you want to delete this journal entry?
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowDeleteModal(false)}>
            Cancel
          </Button>
          <Button variant="danger" onClick={handleDeleteEntry}>
            Delete
          </Button>
        </Modal.Footer>
      </Modal>
    </Container>
  );
};

export default PetJournalPage;